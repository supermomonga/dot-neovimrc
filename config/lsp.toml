# lazy

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_cmd = [
  'LspLog',
  'LspInfo',
  'LspStart',
  'LspStop',
  'LspRestart'
]
on_event = 'VimEnter'
depends = ['ddc-source-lsp', 'ddc-source-lsp-setup']
lua_add = '''
vim.lsp.handlers["textDocument/hover"] = vim.lsp.with(
  vim.lsp.handlers.hover,
  {
    border = "single", -- "shadow" , "none", "rounded"
    -- border = border
    -- width = 100,
  }
)

-- virtual text での診断表示をオフ
vim.diagnostic.config({
  virtual_text = false
})

function on_attach(on_attach)
  vim.api.nvim_create_autocmd("LspAttach", {
    callback = function(args)
      local buffer = args.buf
      local client = vim.lsp.get_client_by_id(args.data.client_id)
      on_attach(client, buffer)
    end,
  })
end

on_attach(function(client, buffer)
  vim.keymap.set('n', 'gd', '<Cmd>Ddu -name=lsp:definitions<CR>', { silent = true, buffer = buffer })
  vim.keymap.set('n', '<C-]>', '<Cmd>Ddu -name=lsp:definitions<CR>', { silent = true, buffer = buffer })
  -- TODO: C-. マッピングが効かない(´・ω・`)
  vim.keymap.set('n', '<C-.>', '<Cmd>Lspsaga code_action<CR>', { silent = true, buffer = buffer })
  vim.keymap.set('n', '<Space>.', '<Cmd>Lspsaga code_action<CR>', { silent = true, buffer = buffer })
  vim.call('signature_help#enable')
end)


local function has_diagnostic_at_cursor()
  local diagnostic = require('lspsaga.diagnostic').get_cursor_diagnostic()
  return #diagnostic > 0
end

local hover_timer_id = nil
local function hover_on_cursor_moved()
  if hover_timer_id then
    vim.fn.timer_stop(hover_timer_id)
  end
  if false then
  -- if has_diagnostic_at_cursor() then
    --TODO: カーソル移動させずにrender_diagnostic_windowする
    --hover_timer_id = vim.fn.timer_start(500, (function() vim.cmd('Lspsaga show_line_diagnostics') end))
  else
    hover_timer_id = vim.fn.timer_start(500, (function() vim.cmd('Lspsaga hover_doc') end))
  end
end

on_attach(function(client, buffer)
  vim.api.nvim_create_autocmd(
    { "CursorMoved" },
    {
      callback = hover_on_cursor_moved,
      buffer = buffer,
    }
  )
end)


'''
lua_source = '''

-- Override capabilities and forceCompletionPattern
require('ddc_source_lsp_setup').setup()
local lspconfig = require('lspconfig')
local util = require('lspconfig.util')

-- Ruby
--lspconfig.rubocop.setup { }
lspconfig.ruby_ls.setup {
  formatter = 'rubocop'
}
lspconfig.steep.setup {
  root_dir = util.root_pattern('Steepfile')
}
-- Deno
lspconfig.denols.setup { }
-- Astro
lspconfig.astro.setup {
  cmd = { "pnpm", "exec", "astro-ls", "--stdio" }
}
lspconfig.mdx_analyzer.setup {
  cmd = { "pnpm", "exec", "mdx-language-server", "--stdio" }
}
-- TypeScript
lspconfig.tsserver.setup {
  cmd = { "pnpm", "exec", "typescript-language-server", "--stdio" }
}
-- C#
lspconfig.omnisharp.setup {
  cmd = { "dotnet", "/home/code/.omnisharp/bin/OmniSharp.dll" },
  enable_editorconfig_support = true,

  -- If true, MSBuild project system will only load projects for files that
  -- were opened in the editor. This setting is useful for big C# codebases
  -- and allows for faster initialization of code navigation features only
  -- for projects that are relevant to code that is being edited. With this
  -- setting enabled OmniSharp may load fewer projects and may thus display
  -- incomplete reference lists for symbols.
  enable_ms_build_load_projects_on_demand = false,

  -- Enables support for roslyn analyzers, code fixes and rulesets.
  enable_roslyn_analyzers = true,

  -- Specifies whether 'using' directives should be grouped and sorted during
  -- document formatting.
  organize_imports_on_format = true,

  -- Enables support for showing unimported types and unimported extension
  -- methods in completion lists. When committed, the appropriate using
  -- directive will be added at the top of the current file. This option can
  -- have a negative impact on initial completion responsiveness,
  -- particularly for the first few completion sessions after opening a
  -- solution.
  enable_import_completion = true,

  -- Specifies whether to include preview versions of the .NET SDK when
  -- determining which version to use for project loading.
  sdk_include_prereleases = true,

  -- Only run analyzers against open files when 'enableRoslynAnalyzers' is
  -- true
  analyze_open_documents_only = false,
}
'''

[[plugins]]
repo = 'matsui54/denops-signature_help'
hook_add = '''
let g:signature_help_config = #{
      \ contentsStyle: "full",
      \ viewStyle: "floating"
      \ }
'''

[[plugins]]
repo = 'elentok/format-on-save.nvim'
on_source = 'nvim-lspconfig'
lua_source = '''
local format_on_save = require("format-on-save")
local formatters = require("format-on-save.formatters")

format_on_save.setup({
  experiments = {
    partial_update = 'diff',
  },
  exclude_path_patterns = {
    "/.git/",
    "/node_modules/",
    "/bin/",
  },
  formatter_by_ft = {
    json = formatters.lsp,
    ruby = formatters.lsp,
  },

  -- Optional: fallback formatter to use when no formatters match the current filetype
  fallback_formatter = {
    formatters.remove_trailing_whitespace,
    formatters.remove_trailing_newlines,
    --formatters.prettierd,
  },

  -- By default, all shell commands are prefixed with "sh -c" (see PR #3)
  -- To prevent that set `run_with_sh` to `false`.
  run_with_sh = false,
})
'''


# LSPサーバーのステータスをいい感じに表示する
[[plugins]]
repo = 'j-hui/fidget.nvim'
on_event = 'VimEnter'
lua_source = '''
require('fidget').setup()
'''

# Diagnostic情報をいい感じに表示したりする
[[plugins]]
repo = 'nvimdev/lspsaga.nvim'
#on_event = 'VimEnter'
on_source = 'nvim-lspconfig'
on_cmd = 'Lspsaga'
lua_source = '''
require('lspsaga').setup({
  diagnostic = {
    keys = {
      quit = { 'q', '<ESC>' }
    }
  },
  ui = {
    border = 'single',
    title = true,
    code_action = ' '
  },
  symbol_in_winbar = { enable = false },
  lightbulb = { enable = true },
})
'''

[[plugins]]
repo = 'https://git.sr.ht/~whynothugo/lsp_lines.nvim'
on_event = 'VimEnter'
lua_source = '''
require('lsp_lines').setup()
'''
