
[[plugins]]
repo = 'folke/edgy.nvim'
on_event = 'VimEnter'
lua_source = '''
local bottom = {
  {
    ft = 'ugaterm',
    title = 'Terminal',
    open = 'UgatermOpen',
    pinned = true,
  },
--  {
--    ft = 'ddu-ff',
--    title = 'Diagnostics',
--    open = 'Ddu -name=edgy:lsp:diagnostics',
--    filter = function(buf)
--      return vim.b[buf].ddu_ui_name == 'edgy:lsp:diagnostics'
--    end,
--    pinned = true,
--  },
--  {
--    ft = 'quickrun',
--    title = 'QuickRun',
--  },
}
local left = {
--  {
--    ft = 'ddu-ff',
--    size = { height = 0.1 },
--    title = 'Buffers',
--    open = 'Ddu -name=edgy:buffers',
--    filter = function(buf)
--      return vim.b[buf].ddu_ui_name == 'edgy:buffers'
--    end,
--    pinned = true,
--  },
  {
    title = 'Files',
    ft = 'fern',
    size = { height = 0.5 },
    open = 'Fern . -drawer -keep -reveal=%',
    pinned = true,
  },
  {
    title = 'Buffers',
    ft = 'neo-tree',
    size = { height = 0.2 },
    open = 'Neotree position=top buffers',
    filter = function(buf)
      return vim.b[buf].neo_tree_source == 'buffers'
    end,
    pinned = true,
  },
  {
    title = 'Git status',
    ft = 'neo-tree',
    size = { height = 0.2 },
    open = 'Neotree position=left git_status git_base=main',
    filter = function(buf)
      return vim.b[buf].neo_tree_source == 'git_status'
    end,
    pinned = true,
  },
}
local right = {
  {
    title = 'Symbols LSP',
    ft = 'ddu-ff',
    size = { height = 0.5 },
    open = 'Ddu -name=edgy:lsp:documentSymbol',
    filter = function(buf)
      return vim.b[buf].ddu_ui_name == 'edgy:lsp:documentSymbol'
    end,
    pinned = true,
  },
  {
    title = 'Symbols',
    ft = 'neo-tree',
    size = { height = 0.5 },
    open = 'Neotree position=bottom document_symbols',
    filter = function(buf)
      return vim.b[buf].neo_tree_source == 'document_symbols'
    end,
    pinned = true,
  },
}
local top = {}
require('edgy').setup({
  top = top,
  bottom = bottom,
  left = left,
  right = right,

  options = {
    left = { size = 40 },
    right = { size = 40 },
    bottom = { size = 20 },
  },

  exit_when_last = true,
  close_when_all_hidden = false,
  animate = {
    enabled = false,
    spinner = {
      frames = { "⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏" },
      interval = 80,
    },
  },
})


-- TODO: spinner が更新されない
local timer_id = nil
local function update_state()
  if timer_id then
    vim.fn.timer_stop(timer_id)
  end
  require('edgy.state').update()
  timer_id = vim.fn.timer_start(100, update_state)
end
-- update_state()

'''
lua_add = '''
-- views can only be fully collapsed with the global statusline
vim.opt.laststatus = 3
-- Default splitting will cause your main splits to jump when opening an edgebar.
-- To prevent this, set `splitkeep` to either `screen` or `topline`.
vim.opt.splitkeep = "screen"

vim.api.nvim_create_user_command(
  'ToggleSidebar',
  function(opts)
    require('edgy').toggle('left')
  end,
  {}
)
vim.api.nvim_create_user_command(
  'ToggleSecondarySidebar',
  function(opts)
    require('edgy').toggle('right')
  end,
  {}
)
vim.api.nvim_create_user_command(
  'ToggleBottomPane',
  function(opts)
    require('edgy').toggle('bottom')
  end,
  {}
)
vim.api.nvim_create_user_command(
  'GoToEditorPane',
  function(opts)
    require('edgy').goto_main()
  end,
  {}
)

'''
hook_add = '''
nnoremap <Space>s :ToggleSidebar<CR>
nnoremap <Space>r :ToggleSecondarySidebar<CR>
nnoremap <Space>t :ToggleBottomPane<CR>
nnoremap <Space>m :GoToEditorPane<CR>
'''
